// H3: auto-correct + self-assess (on-device)
window.H3 = {
  // utils
  clean(s){ return (s||"").replace(/\s+/g," ").trim(); },
  capFirst(s){ return (s||"").replace(/^([a-z])/, m=>m.toUpperCase()); },
  smartQuotes(s){
    return (s||"")
      .replace(/(^|[\s[(])"([^"]*)"/g, '$1“$2”')
      .replace(/(^|[\s[(])'([^']*)'/g, "$1‘$2’")
      .replace(/--/g, "—");
  },

  // autocorrect
  autocorrect(s){
    if(!s) return "";
    let t = s.normalize("NFC");
    t = this.clean(t);
    t = t.replace(/\s+([,.;:!?])/g, "$1");       // no space before punctuation
    t = t.replace(/([,.;:!?])(?!\s|$)/g, "$1 "); // ensure space after punctuation
    t = t.replace(/\s{2,}/g, " ");               // collapse doubles
    t = this.smartQuotes(t);
    // common pronoun/contration fixes
    t = t.replace(/\bi\b/g, "I")
         .replace(/\bi\sam\b/gi,"I am")
         .replace(/\bi'm\b/gi,"I'm");
    t = this.capFirst(t);
    return this.clean(t);
  },

  // self assessment
  assess(s){
    const text = this.clean(s||"");
    const words = text ? text.split(/\s+/).length : 0;
    const sentences = (text.match(/[.!?]+/g)||[]).length || (text?1:0);
    const chars = text.replace(/\s/g,"").length;
    // rough syllable count
    const syllables = (text.match(/[aeiouy]+/gi)||[]).length;
    const ASL = words/(sentences||1);
    const ASW = syllables/(words||1);
    const flesch = Math.max(0, Math.min(100, 206.835 - 1.015*ASL - 84.6*ASW));

    const suggestions = [];
    if (ASL > 22) suggestions.push("Break long sentences.");
    if (words < 40) suggestions.push("Add detail. Aim for 100–150 words.");
    if (flesch < 50) suggestions.push("Use simpler words.");
    if (/\s{2,}/.test(text)) suggestions.push("Remove extra spaces.");

    return { words, sentences, chars, flesch: Math.round(flesch), suggestions };
  },

  // storage
  save(k,v){ try{ localStorage.setItem(k, JSON.stringify(v)); return true; }catch(e){ return false; } },
  load(k){ try{ return JSON.parse(localStorage.getItem(k) || "null"); }catch(e){ return null; } }
};